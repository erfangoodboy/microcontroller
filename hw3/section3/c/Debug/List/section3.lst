
AVRASM ver. 2.1.30  C:\Users\Asus\Desktop\project\microcontroller\hw3\section3\Debug\List\section3.asm Mon Jan 11 11:53:00 2021

C:\Users\Asus\Desktop\project\microcontroller\hw3\section3\Debug\List\section3.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Asus\Desktop\project\microcontroller\hw3\section3\Debug\List\section3.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Asus\Desktop\project\microcontroller\hw3\section3\Debug\List\section3.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\Asus\Desktop\project\microcontroller\hw3\section3\Debug\List\section3.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\Asus\Desktop\project\microcontroller\hw3\section3\Debug\List\section3.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\Asus\Desktop\project\microcontroller\hw3\section3\Debug\List\section3.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\Asus\Desktop\project\microcontroller\hw3\section3\Debug\List\section3.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\Asus\Desktop\project\microcontroller\hw3\section3\Debug\List\section3.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\Asus\Desktop\project\microcontroller\hw3\section3\Debug\List\section3.asm(1096): warning: Register r13 already defined by the .DEF directive
C:\Users\Asus\Desktop\project\microcontroller\hw3\section3\Debug\List\section3.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _timerCounterForOverflow=R4
                 	.DEF _timerCounterForOverflow_msb=R5
                 	.DEF _begin=R6
                 	.DEF _begin_msb=R7
                 	.DEF _end=R8
                 	.DEF _end_msb=R9
                 	.DEF _timeLenght=R10
                 	.DEF _timeLenght_msb=R11
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0055 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0082 	JMP  _timer1_ovf_isr
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x0:
000037 7246
000038 7165
000039 6575
00003a 636e      	.DB  0x46,0x72,0x65,0x71,0x75,0x65,0x6E,0x63
00003b 2079
00003c 6163
00003d 636c
00003e 6c75      	.DB  0x79,0x20,0x63,0x61,0x6C,0x63,0x75,0x6C
00003f 7461
000040 6465
000041 3d20
000042 2520      	.DB  0x61,0x74,0x65,0x64,0x20,0x3D,0x20,0x25
000043 0064
000044 6163
000045 636c
000046 6c75      	.DB  0x64,0x0,0x63,0x61,0x6C,0x63,0x75,0x6C
000047 7461
000048 6e69
000049 0067      	.DB  0x61,0x74,0x69,0x6E,0x67,0x0
                 _0x2000003:
00004a c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00004b 0008      	.DW  0x08
00004c 0004      	.DW  0x04
00004d 0066      	.DW  __REG_VARS*2
                 
00004e 000c      	.DW  0x0C
00004f 0160      	.DW  _0xC
000050 0088      	.DW  _0x0*2+26
                 
000051 0002      	.DW  0x02
000052 01d4      	.DW  __base_y_G100
000053 0094      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000054 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000055 94f8      	CLI
000056 27ee      	CLR  R30
000057 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000058 e0f1      	LDI  R31,1
000059 bffb      	OUT  GICR,R31
00005a bfeb      	OUT  GICR,R30
00005b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00005c e08d      	LDI  R24,(14-2)+1
00005d e0a2      	LDI  R26,2
00005e 27bb      	CLR  R27
                 __CLEAR_REG:
00005f 93ed      	ST   X+,R30
000060 958a      	DEC  R24
000061 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000062 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000063 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000064 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000065 93ed      	ST   X+,R30
000066 9701      	SBIW R24,1
000067 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000068 e9e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000069 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006a 9185      	LPM  R24,Z+
00006b 9195      	LPM  R25,Z+
00006c 9700      	SBIW R24,0
00006d f061      	BREQ __GLOBAL_INI_END
00006e 91a5      	LPM  R26,Z+
00006f 91b5      	LPM  R27,Z+
000070 9005      	LPM  R0,Z+
000071 9015      	LPM  R1,Z+
000072 01bf      	MOVW R22,R30
000073 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000074 9005      	LPM  R0,Z+
000075 920d      	ST   X+,R0
000076 9701      	SBIW R24,1
000077 f7e1      	BRNE __GLOBAL_INI_LOOP
000078 01fb      	MOVW R30,R22
000079 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007a e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007b bfed      	OUT  SPL,R30
00007c e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007e e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007f e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000080 940c 00fa 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;
                 ;#define ICR1 256 * ICR1H + ICR1L;
                 ;
                 ;int timerCounterForOverflow = 0;
                 ;int begin = 0;
                 ;int end = 0;
                 ;int timeLenght = 0;
                 ;long freq;
                 ;char frequencyChars[100];
                 ;
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0010 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000082 920a      	ST   -Y,R0
000083 921a      	ST   -Y,R1
000084 92fa      	ST   -Y,R15
000085 936a      	ST   -Y,R22
000086 937a      	ST   -Y,R23
000087 938a      	ST   -Y,R24
000088 939a      	ST   -Y,R25
000089 93aa      	ST   -Y,R26
00008a 93ba      	ST   -Y,R27
00008b 93ea      	ST   -Y,R30
00008c 93fa      	ST   -Y,R31
00008d b7ef      	IN   R30,SREG
00008e 93ea      	ST   -Y,R30
                 ; 0000 0011     ++timerCounterForOverflow;
00008f 01f2      	MOVW R30,R4
000090 9631      	ADIW R30,1
000091 012f      	MOVW R4,R30
                 ; 0000 0012     if(timerCounterForOverflow == 100){
000092 e6e4      	LDI  R30,LOW(100)
000093 e0f0      	LDI  R31,HIGH(100)
000094 15e4      	CP   R30,R4
000095 05f5      	CPC  R31,R5
000096 f009      	BREQ PC+2
000097 c050      	RJMP _0x3
                 ; 0000 0013         TCCR1A = 0;
000098 e0e0      	LDI  R30,LOW(0)
000099 bdef      	OUT  0x2F,R30
                 ; 0000 0014         TCNT1=0;
00009a e0e0      	LDI  R30,LOW(0)
00009b e0f0      	LDI  R31,HIGH(0)
00009c bdfd      	OUT  0x2C+1,R31
00009d bdec      	OUT  0x2C,R30
                 ; 0000 0015         TIFR = (1<<ICF1);
00009e e2e0      	LDI  R30,LOW(32)
00009f bfe8      	OUT  0x38,R30
                 ; 0000 0016         //calculating begin
                 ; 0000 0017         TCCR1B = 0x41;
0000a0 e4e1      	LDI  R30,LOW(65)
0000a1 bdee      	OUT  0x2E,R30
                 ; 0000 0018         while ((TIFR&(1<<ICF1)) == 0);
                 _0x4:
0000a2 b7e8      	IN   R30,0x38
0000a3 ffe5      	SBRS R30,5
0000a4 cffd      	RJMP _0x4
                 ; 0000 0019         begin = ICR1;
0000a5 940e 0364 	CALL SUBOPT_0x0
0000a7 013f      	MOVW R6,R30
                 ; 0000 001A         TIFR = (1<<ICF1);
0000a8 e2e0      	LDI  R30,LOW(32)
0000a9 bfe8      	OUT  0x38,R30
                 ; 0000 001B         //calculating end
                 ; 0000 001C         TCCR1B = 0x41;
0000aa e4e1      	LDI  R30,LOW(65)
0000ab bdee      	OUT  0x2E,R30
                 ; 0000 001D         while ((TIFR&(1<<ICF1)) == 0);
                 _0x7:
0000ac b7e8      	IN   R30,0x38
0000ad ffe5      	SBRS R30,5
0000ae cffd      	RJMP _0x7
                 ; 0000 001E         end = ICR1;
0000af 940e 0364 	CALL SUBOPT_0x0
0000b1 014f      	MOVW R8,R30
                 ; 0000 001F         TIFR = (1<<ICF1);
0000b2 e2e0      	LDI  R30,LOW(32)
0000b3 bfe8      	OUT  0x38,R30
                 ; 0000 0020 
                 ; 0000 0021         TCCR1B = 0;
0000b4 e0e0      	LDI  R30,LOW(0)
0000b5 bdee      	OUT  0x2E,R30
                 ; 0000 0022 
                 ; 0000 0023         if(begin < end)
                +
0000b6 1468     +CP R6 , R8
0000b7 0479     +CPC R7 , R9
                 	__CPWRR 6,7,8,9
0000b8 f564      	BRGE _0xA
                 ; 0000 0024         {
                 ; 0000 0025             lcd_clear();
0000b9 d086      	RCALL _lcd_clear
                 ; 0000 0026             timeLenght = end - begin;
0000ba 01f4      	MOVW R30,R8
0000bb 19e6      	SUB  R30,R6
0000bc 09f7      	SBC  R31,R7
0000bd 015f      	MOVW R10,R30
                 ; 0000 0027             freq= 8000000UL/timeLenght;
0000be 940e 03b9 	CALL __CWD1
                +
0000c0 e0a0     +LDI R26 , LOW ( 0x7A1200 )
0000c1 e1b2     +LDI R27 , HIGH ( 0x7A1200 )
0000c2 e78a     +LDI R24 , BYTE3 ( 0x7A1200 )
0000c3 e090     +LDI R25 , BYTE4 ( 0x7A1200 )
                 	__GETD2N 0x7A1200
0000c4 940e 03be 	CALL __DIVD21U
0000c6 93e0 016c 	STS  _freq,R30
0000c8 93f0 016d 	STS  _freq+1,R31
0000ca 9360 016e 	STS  _freq+2,R22
0000cc 9370 016f 	STS  _freq+3,R23
                 ; 0000 0028             sprintf(frequencyChars,"Frequency calculated = %d", (int)freq);
0000ce e7e0      	LDI  R30,LOW(_frequencyChars)
0000cf e0f1      	LDI  R31,HIGH(_frequencyChars)
0000d0 93fa      	ST   -Y,R31
0000d1 93ea      	ST   -Y,R30
                +
0000d2 e6ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000d3 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000d4 93fa      	ST   -Y,R31
0000d5 93ea      	ST   -Y,R30
0000d6 91e0 016c 	LDS  R30,_freq
0000d8 91f0 016d 	LDS  R31,_freq+1
0000da 940e 03b9 	CALL __CWD1
0000dc 940e 03eb 	CALL __PUTPARD1
0000de e084      	LDI  R24,4
0000df 940e 0317 	CALL _sprintf
0000e1 9628      	ADIW R28,8
                 ; 0000 0029             lcd_puts(frequencyChars);
0000e2 e7a0      	LDI  R26,LOW(_frequencyChars)
0000e3 e0b1      	LDI  R27,HIGH(_frequencyChars)
0000e4 c002      	RJMP _0x11
                 ; 0000 002A         }
                 ; 0000 002B         else {
                 _0xA:
                 ; 0000 002C             lcd_puts("calculating");
                +
0000e5 e6a0     +LDI R26 , LOW ( _0xC + ( 0 ) )
0000e6 e0b1     +LDI R27 , HIGH ( _0xC + ( 0 ) )
                 	__POINTW2MN _0xC,0
                 _0x11:
0000e7 d07b      	RCALL _lcd_puts
                 ; 0000 002D         }
                 ; 0000 002E     }
                 ; 0000 002F 
                 ; 0000 0030     TCNT1H=0xFF;
                 _0x3:
0000e8 efef      	LDI  R30,LOW(255)
0000e9 bded      	OUT  0x2D,R30
                 ; 0000 0031     TCNT1L=0xF0;
0000ea efe0      	LDI  R30,LOW(240)
0000eb bdec      	OUT  0x2C,R30
                 ; 0000 0032 }
0000ec 91e9      	LD   R30,Y+
0000ed bfef      	OUT  SREG,R30
0000ee 91f9      	LD   R31,Y+
0000ef 91e9      	LD   R30,Y+
0000f0 91b9      	LD   R27,Y+
0000f1 91a9      	LD   R26,Y+
0000f2 9199      	LD   R25,Y+
0000f3 9189      	LD   R24,Y+
0000f4 9179      	LD   R23,Y+
0000f5 9169      	LD   R22,Y+
0000f6 90f9      	LD   R15,Y+
0000f7 9019      	LD   R1,Y+
0000f8 9009      	LD   R0,Y+
0000f9 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0xC:
000160           	.BYTE 0xC
                 ;void main(void)
                 ; 0000 0034 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0035     lcd_init(20);
0000fa e1a4      	LDI  R26,LOW(20)
0000fb d078      	RCALL _lcd_init
                 ; 0000 0036     DDRA =0xFF;
0000fc efef      	LDI  R30,LOW(255)
0000fd bbea      	OUT  0x1A,R30
                 ; 0000 0037     PORTA = 0x00;
0000fe e0e0      	LDI  R30,LOW(0)
0000ff bbeb      	OUT  0x1B,R30
                 ; 0000 0038 
                 ; 0000 0039 // Declare your local variables here
                 ; 0000 003A 
                 ; 0000 003B // Port D initialization
                 ; 0000 003C DDRD=0b11111111;
000100 efef      	LDI  R30,LOW(255)
000101 bbe1      	OUT  0x11,R30
                 ; 0000 003D PORTD=0b00000000;
000102 e0e0      	LDI  R30,LOW(0)
000103 bbe2      	OUT  0x12,R30
                 ; 0000 003E // Timer/Counter 1 initialization
                 ; 0000 003F // Clock source: System Clock
                 ; 0000 0040 // Clock value: 125.000 kHz
                 ; 0000 0041 // Mode: Normal top=0xFFFF
                 ; 0000 0042 // OC1A output: Disconnected
                 ; 0000 0043 // OC1B output: Disconnected
                 ; 0000 0044 // Noise Canceler: Off
                 ; 0000 0045 // Input Capture on Falling Edge
                 ; 0000 0046 // Timer Period: 0.52429 s
                 ; 0000 0047 // Timer1 Overflow Interrupt: On
                 ; 0000 0048 // Input Capture Interrupt: Off
                 ; 0000 0049 // Compare A Match Interrupt: Off
                 ; 0000 004A // Compare B Match Interrupt: Off
                 ; 0000 004B TCCR1A=0x00;
000104 bdef      	OUT  0x2F,R30
                 ; 0000 004C TCCR1B=0x01;
000105 e0e1      	LDI  R30,LOW(1)
000106 bdee      	OUT  0x2E,R30
                 ; 0000 004D TCNT1H=0xFF;
000107 efef      	LDI  R30,LOW(255)
000108 bded      	OUT  0x2D,R30
                 ; 0000 004E TCNT1L=0xF0;
000109 efe0      	LDI  R30,LOW(240)
00010a bdec      	OUT  0x2C,R30
                 ; 0000 004F 
                 ; 0000 0050 
                 ; 0000 0051 // External Interrupt(s) initialization
                 ; 0000 0052 // INT0: Off
                 ; 0000 0053 // INT1: Off
                 ; 0000 0054 // INT2: Off
                 ; 0000 0055 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00010b e0e0      	LDI  R30,LOW(0)
00010c bfe5      	OUT  0x35,R30
                 ; 0000 0056 MCUCSR=(0<<ISC2);
00010d bfe4      	OUT  0x34,R30
                 ; 0000 0057 
                 ; 0000 0058 
                 ; 0000 0059 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 005A TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
00010e e0e4      	LDI  R30,LOW(4)
00010f bfe9      	OUT  0x39,R30
                 ; 0000 005B 
                 ; 0000 005C #asm("sei")
000110 9478      	sei
                 ; 0000 005D while (1)
                 _0xD:
                 ; 0000 005E       {
                 ; 0000 005F       // Place your code here
                 ; 0000 0060       }
000111 cfff      	RJMP _0xD
                 ; 0000 0061 }
                 _0x10:
000112 cfff      	RJMP _0x10
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000113 93aa      	ST   -Y,R26
000114 b3eb      	IN   R30,0x1B
000115 70ef      	ANDI R30,LOW(0xF)
000116 2fae      	MOV  R26,R30
000117 81e8      	LD   R30,Y
000118 7fe0      	ANDI R30,LOW(0xF0)
000119 2bea      	OR   R30,R26
00011a bbeb      	OUT  0x1B,R30
                +
00011b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00011c 958a     +DEC R24
00011d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00011e 9ada      	SBI  0x1B,2
                +
00011f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000120 958a     +DEC R24
000121 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000122 98da      	CBI  0x1B,2
                +
000123 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000124 958a     +DEC R24
000125 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000126 c07a      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000127 93aa      	ST   -Y,R26
000128 81a8      	LD   R26,Y
000129 dfe9      	RCALL __lcd_write_nibble_G100
00012a 81e8          ld    r30,y
00012b 95e2          swap  r30
00012c 83e8          st    y,r30
00012d 81a8      	LD   R26,Y
00012e dfe4      	RCALL __lcd_write_nibble_G100
                +
00012f e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000130 958a     +DEC R24
000131 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000132 c06e      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000133 93aa      	ST   -Y,R26
000134 81e8      	LD   R30,Y
000135 e0f0      	LDI  R31,0
000136 52ec      	SUBI R30,LOW(-__base_y_G100)
000137 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000138 81e0      	LD   R30,Z
000139 81a9      	LDD  R26,Y+1
00013a 0fae      	ADD  R26,R30
00013b dfeb      	RCALL __lcd_write_data
00013c 80d9      	LDD  R13,Y+1
00013d 80c8      	LDD  R12,Y+0
00013e 9622      	ADIW R28,2
00013f 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000140 e0a2      	LDI  R26,LOW(2)
000141 940e 036d 	CALL SUBOPT_0x1
000143 e0ac      	LDI  R26,LOW(12)
000144 dfe2      	RCALL __lcd_write_data
000145 e0a1      	LDI  R26,LOW(1)
000146 940e 036d 	CALL SUBOPT_0x1
000148 e0e0      	LDI  R30,LOW(0)
000149 2ece      	MOV  R12,R30
00014a 2ede      	MOV  R13,R30
00014b 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00014c 93aa      	ST   -Y,R26
00014d 81a8      	LD   R26,Y
00014e 30aa      	CPI  R26,LOW(0xA)
00014f f021      	BREQ _0x2000005
000150 91e0 01d8 	LDS  R30,__lcd_maxx
000152 16de      	CP   R13,R30
000153 f048      	BRLO _0x2000004
                 _0x2000005:
000154 e0e0      	LDI  R30,LOW(0)
000155 93ea      	ST   -Y,R30
000156 94c3      	INC  R12
000157 2dac      	MOV  R26,R12
000158 dfda      	RCALL _lcd_gotoxy
000159 81a8      	LD   R26,Y
00015a 30aa      	CPI  R26,LOW(0xA)
00015b f409      	BRNE _0x2000007
00015c c044      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
00015d 94d3      	INC  R13
00015e 9ad8      	SBI  0x1B,0
00015f 81a8      	LD   R26,Y
000160 dfc6      	RCALL __lcd_write_data
000161 98d8      	CBI  0x1B,0
000162 c03e      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000163 93ba      	ST   -Y,R27
000164 93aa      	ST   -Y,R26
000165 931a      	ST   -Y,R17
                 _0x2000008:
000166 81a9      	LDD  R26,Y+1
000167 81ba      	LDD  R27,Y+1+1
000168 91ed      	LD   R30,X+
000169 83a9      	STD  Y+1,R26
00016a 83ba      	STD  Y+1+1,R27
00016b 2f1e      	MOV  R17,R30
00016c 30e0      	CPI  R30,0
00016d f019      	BREQ _0x200000A
00016e 2fa1      	MOV  R26,R17
00016f dfdc      	RCALL _lcd_putchar
000170 cff5      	RJMP _0x2000008
                 _0x200000A:
000171 8118      	LDD  R17,Y+0
000172 9623      	ADIW R28,3
000173 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000174 93aa      	ST   -Y,R26
000175 b3ea      	IN   R30,0x1A
000176 6fe0      	ORI  R30,LOW(0xF0)
000177 bbea      	OUT  0x1A,R30
000178 9ad2      	SBI  0x1A,2
000179 9ad0      	SBI  0x1A,0
00017a 9ad1      	SBI  0x1A,1
00017b 98da      	CBI  0x1B,2
00017c 98d8      	CBI  0x1B,0
00017d 98d9      	CBI  0x1B,1
00017e 81e8      	LD   R30,Y
00017f 93e0 01d8 	STS  __lcd_maxx,R30
000181 58e0      	SUBI R30,-LOW(128)
                +
000182 93e0 01d6+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000184 81e8      	LD   R30,Y
000185 54e0      	SUBI R30,-LOW(192)
                +
000186 93e0 01d7+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000188 e1a4      	LDI  R26,LOW(20)
000189 e0b0      	LDI  R27,0
00018a 940e 03a7 	CALL _delay_ms
00018c 940e 0373 	CALL SUBOPT_0x2
00018e 940e 0373 	CALL SUBOPT_0x2
000190 940e 0373 	CALL SUBOPT_0x2
000192 e2a0      	LDI  R26,LOW(32)
000193 df7f      	RCALL __lcd_write_nibble_G100
                +
000194 ec88     +LDI R24 , LOW ( 200 )
000195 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000196 9701     +SBIW R24 , 1
000197 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000198 e2a8      	LDI  R26,LOW(40)
000199 df8d      	RCALL __lcd_write_data
00019a e0a4      	LDI  R26,LOW(4)
00019b df8b      	RCALL __lcd_write_data
00019c e8a5      	LDI  R26,LOW(133)
00019d df89      	RCALL __lcd_write_data
00019e e0a6      	LDI  R26,LOW(6)
00019f df87      	RCALL __lcd_write_data
0001a0 df9f      	RCALL _lcd_clear
                 _0x2080002:
0001a1 9621      	ADIW R28,1
0001a2 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0001a3 93ba      	ST   -Y,R27
0001a4 93aa      	ST   -Y,R26
0001a5 931a      	ST   -Y,R17
0001a6 930a      	ST   -Y,R16
0001a7 81aa      	LDD  R26,Y+2
0001a8 81bb      	LDD  R27,Y+2+1
0001a9 9612      	ADIW R26,2
0001aa 940e 03e3 	CALL __GETW1P
0001ac 9730      	SBIW R30,0
0001ad f159      	BREQ _0x2020010
0001ae 81aa      	LDD  R26,Y+2
0001af 81bb      	LDD  R27,Y+2+1
0001b0 9614      	ADIW R26,4
0001b1 940e 03e3 	CALL __GETW1P
0001b3 018f      	MOVW R16,R30
0001b4 9730      	SBIW R30,0
0001b5 f061      	BREQ _0x2020012
                +
0001b6 3002     +CPI R16 , LOW ( 2 )
0001b7 e0e0     +LDI R30 , HIGH ( 2 )
0001b8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001b9 f098      	BRLO _0x2020013
0001ba 01f8      	MOVW R30,R16
0001bb 9731      	SBIW R30,1
0001bc 018f      	MOVW R16,R30
                +
0001bd 81aa     +LDD R26 , Y + 2
0001be 81bb     +LDD R27 , Y + 2 + 1
0001bf 9614     +ADIW R26 , 4
0001c0 93ed     +ST X + , R30
0001c1 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0001c2 81aa      	LDD  R26,Y+2
0001c3 81bb      	LDD  R27,Y+2+1
0001c4 9612      	ADIW R26,2
0001c5 91ed      	LD   R30,X+
0001c6 91fd      	LD   R31,X+
0001c7 9631      	ADIW R30,1
0001c8 93fe      	ST   -X,R31
0001c9 93ee      	ST   -X,R30
0001ca 9731      	SBIW R30,1
0001cb 81ac      	LDD  R26,Y+4
0001cc 83a0      	STD  Z+0,R26
                 _0x2020013:
0001cd 81aa      	LDD  R26,Y+2
0001ce 81bb      	LDD  R27,Y+2+1
0001cf 940e 03e3 	CALL __GETW1P
0001d1 23ff      	TST  R31
0001d2 f02a      	BRMI _0x2020014
0001d3 91ed      	LD   R30,X+
0001d4 91fd      	LD   R31,X+
0001d5 9631      	ADIW R30,1
0001d6 93fe      	ST   -X,R31
0001d7 93ee      	ST   -X,R30
                 _0x2020014:
0001d8 c006      	RJMP _0x2020015
                 _0x2020010:
0001d9 81aa      	LDD  R26,Y+2
0001da 81bb      	LDD  R27,Y+2+1
0001db efef      	LDI  R30,LOW(65535)
0001dc efff      	LDI  R31,HIGH(65535)
0001dd 93ed      	ST   X+,R30
0001de 93fc      	ST   X,R31
                 _0x2020015:
0001df 8119      	LDD  R17,Y+1
0001e0 8108      	LDD  R16,Y+0
0001e1 9625      	ADIW R28,5
0001e2 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0001e3 93ba      	ST   -Y,R27
0001e4 93aa      	ST   -Y,R26
0001e5 9726      	SBIW R28,6
0001e6 940e 03f0 	CALL __SAVELOCR6
0001e8 e010      	LDI  R17,0
0001e9 85ac      	LDD  R26,Y+12
0001ea 85bd      	LDD  R27,Y+12+1
0001eb e0e0      	LDI  R30,LOW(0)
0001ec e0f0      	LDI  R31,HIGH(0)
0001ed 93ed      	ST   X+,R30
0001ee 93fc      	ST   X,R31
                 _0x2020016:
0001ef 89ea      	LDD  R30,Y+18
0001f0 89fb      	LDD  R31,Y+18+1
0001f1 9631      	ADIW R30,1
0001f2 8bea      	STD  Y+18,R30
0001f3 8bfb      	STD  Y+18+1,R31
0001f4 9731      	SBIW R30,1
0001f5 91e4      	LPM  R30,Z
0001f6 2f2e      	MOV  R18,R30
0001f7 30e0      	CPI  R30,0
0001f8 f409      	BRNE PC+2
0001f9 c115      	RJMP _0x2020018
0001fa 2fe1      	MOV  R30,R17
0001fb 30e0      	CPI  R30,0
0001fc f439      	BRNE _0x202001C
0001fd 3225      	CPI  R18,37
0001fe f411      	BRNE _0x202001D
0001ff e011      	LDI  R17,LOW(1)
000200 c002      	RJMP _0x202001E
                 _0x202001D:
000201 940e 037b 	CALL SUBOPT_0x3
                 _0x202001E:
000203 c10a      	RJMP _0x202001B
                 _0x202001C:
000204 30e1      	CPI  R30,LOW(0x1)
000205 f4a9      	BRNE _0x202001F
000206 3225      	CPI  R18,37
000207 f419      	BRNE _0x2020020
000208 940e 037b 	CALL SUBOPT_0x3
00020a c102      	RJMP _0x20200CC
                 _0x2020020:
00020b e012      	LDI  R17,LOW(2)
00020c e040      	LDI  R20,LOW(0)
00020d e000      	LDI  R16,LOW(0)
00020e 322d      	CPI  R18,45
00020f f411      	BRNE _0x2020021
000210 e001      	LDI  R16,LOW(1)
000211 c0fc      	RJMP _0x202001B
                 _0x2020021:
000212 322b      	CPI  R18,43
000213 f411      	BRNE _0x2020022
000214 e24b      	LDI  R20,LOW(43)
000215 c0f8      	RJMP _0x202001B
                 _0x2020022:
000216 3220      	CPI  R18,32
000217 f411      	BRNE _0x2020023
000218 e240      	LDI  R20,LOW(32)
000219 c0f4      	RJMP _0x202001B
                 _0x2020023:
00021a c002      	RJMP _0x2020024
                 _0x202001F:
00021b 30e2      	CPI  R30,LOW(0x2)
00021c f439      	BRNE _0x2020025
                 _0x2020024:
00021d e050      	LDI  R21,LOW(0)
00021e e013      	LDI  R17,LOW(3)
00021f 3320      	CPI  R18,48
000220 f411      	BRNE _0x2020026
000221 6800      	ORI  R16,LOW(128)
000222 c0eb      	RJMP _0x202001B
                 _0x2020026:
000223 c003      	RJMP _0x2020027
                 _0x2020025:
000224 30e3      	CPI  R30,LOW(0x3)
000225 f009      	BREQ PC+2
000226 c0e7      	RJMP _0x202001B
                 _0x2020027:
000227 3320      	CPI  R18,48
000228 f010      	BRLO _0x202002A
000229 332a      	CPI  R18,58
00022a f008      	BRLO _0x202002B
                 _0x202002A:
00022b c007      	RJMP _0x2020029
                 _0x202002B:
00022c e0aa      	LDI  R26,LOW(10)
00022d 9f5a      	MUL  R21,R26
00022e 2d50      	MOV  R21,R0
00022f 2fe2      	MOV  R30,R18
000230 53e0      	SUBI R30,LOW(48)
000231 0f5e      	ADD  R21,R30
000232 c0db      	RJMP _0x202001B
                 _0x2020029:
000233 2fe2      	MOV  R30,R18
000234 36e3      	CPI  R30,LOW(0x63)
000235 f449      	BRNE _0x202002F
000236 940e 0382 	CALL SUBOPT_0x4
000238 89e8      	LDD  R30,Y+16
000239 89f9      	LDD  R31,Y+16+1
00023a 81a4      	LDD  R26,Z+4
00023b 93aa      	ST   -Y,R26
00023c 940e 0388 	CALL SUBOPT_0x5
00023e c0ce      	RJMP _0x2020030
                 _0x202002F:
00023f 37e3      	CPI  R30,LOW(0x73)
000240 f441      	BRNE _0x2020032
000241 940e 0382 	CALL SUBOPT_0x4
000243 940e 038e 	CALL SUBOPT_0x6
000245 940e 034b 	CALL _strlen
000247 2f1e      	MOV  R17,R30
000248 c00a      	RJMP _0x2020033
                 _0x2020032:
000249 37e0      	CPI  R30,LOW(0x70)
00024a f461      	BRNE _0x2020035
00024b 940e 0382 	CALL SUBOPT_0x4
00024d 940e 038e 	CALL SUBOPT_0x6
00024f 940e 0357 	CALL _strlenf
000251 2f1e      	MOV  R17,R30
000252 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000253 6002      	ORI  R16,LOW(2)
000254 770f      	ANDI R16,LOW(127)
000255 e030      	LDI  R19,LOW(0)
000256 c034      	RJMP _0x2020036
                 _0x2020035:
000257 36e4      	CPI  R30,LOW(0x64)
000258 f011      	BREQ _0x2020039
000259 36e9      	CPI  R30,LOW(0x69)
00025a f411      	BRNE _0x202003A
                 _0x2020039:
00025b 6004      	ORI  R16,LOW(4)
00025c c002      	RJMP _0x202003B
                 _0x202003A:
00025d 37e5      	CPI  R30,LOW(0x75)
00025e f431      	BRNE _0x202003C
                 _0x202003B:
00025f e5e4      	LDI  R30,LOW(_tbl10_G101*2)
000260 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000261 83ee      	STD  Y+6,R30
000262 83ff      	STD  Y+6+1,R31
000263 e015      	LDI  R17,LOW(5)
000264 c00c      	RJMP _0x202003D
                 _0x202003C:
000265 35e8      	CPI  R30,LOW(0x58)
000266 f411      	BRNE _0x202003F
000267 6008      	ORI  R16,LOW(8)
000268 c003      	RJMP _0x2020040
                 _0x202003F:
000269 37e8      	CPI  R30,LOW(0x78)
00026a f009      	BREQ PC+2
00026b c0a1      	RJMP _0x2020071
                 _0x2020040:
00026c e5ee      	LDI  R30,LOW(_tbl16_G101*2)
00026d e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
00026e 83ee      	STD  Y+6,R30
00026f 83ff      	STD  Y+6+1,R31
000270 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000271 ff02      	SBRS R16,2
000272 c014      	RJMP _0x2020042
000273 940e 0382 	CALL SUBOPT_0x4
000275 940e 0398 	CALL SUBOPT_0x7
000277 85ab      	LDD  R26,Y+11
000278 23aa      	TST  R26
000279 f43a      	BRPL _0x2020043
00027a 85ea      	LDD  R30,Y+10
00027b 85fb      	LDD  R31,Y+10+1
00027c 940e 03b5 	CALL __ANEGW1
00027e 87ea      	STD  Y+10,R30
00027f 87fb      	STD  Y+10+1,R31
000280 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000281 3040      	CPI  R20,0
000282 f011      	BREQ _0x2020044
000283 5f1f      	SUBI R17,-LOW(1)
000284 c001      	RJMP _0x2020045
                 _0x2020044:
000285 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000286 c004      	RJMP _0x2020046
                 _0x2020042:
000287 940e 0382 	CALL SUBOPT_0x4
000289 940e 0398 	CALL SUBOPT_0x7
                 _0x2020046:
                 _0x2020036:
00028b fd00      	SBRC R16,0
00028c c011      	RJMP _0x2020047
                 _0x2020048:
00028d 1715      	CP   R17,R21
00028e f478      	BRSH _0x202004A
00028f ff07      	SBRS R16,7
000290 c008      	RJMP _0x202004B
000291 ff02      	SBRS R16,2
000292 c004      	RJMP _0x202004C
000293 7f0b      	ANDI R16,LOW(251)
000294 2f24      	MOV  R18,R20
000295 5011      	SUBI R17,LOW(1)
000296 c001      	RJMP _0x202004D
                 _0x202004C:
000297 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000298 c001      	RJMP _0x202004E
                 _0x202004B:
000299 e220      	LDI  R18,LOW(32)
                 _0x202004E:
00029a 940e 037b 	CALL SUBOPT_0x3
00029c 5051      	SUBI R21,LOW(1)
00029d cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
00029e 2f31      	MOV  R19,R17
00029f ff01      	SBRS R16,1
0002a0 c017      	RJMP _0x202004F
                 _0x2020050:
0002a1 3030      	CPI  R19,0
0002a2 f0a1      	BREQ _0x2020052
0002a3 ff03      	SBRS R16,3
0002a4 c006      	RJMP _0x2020053
0002a5 81ee      	LDD  R30,Y+6
0002a6 81ff      	LDD  R31,Y+6+1
0002a7 9125      	LPM  R18,Z+
0002a8 83ee      	STD  Y+6,R30
0002a9 83ff      	STD  Y+6+1,R31
0002aa c005      	RJMP _0x2020054
                 _0x2020053:
0002ab 81ae      	LDD  R26,Y+6
0002ac 81bf      	LDD  R27,Y+6+1
0002ad 912d      	LD   R18,X+
0002ae 83ae      	STD  Y+6,R26
0002af 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0002b0 940e 037b 	CALL SUBOPT_0x3
0002b2 3050      	CPI  R21,0
0002b3 f009      	BREQ _0x2020055
0002b4 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0002b5 5031      	SUBI R19,LOW(1)
0002b6 cfea      	RJMP _0x2020050
                 _0x2020052:
0002b7 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0002b8 e320      	LDI  R18,LOW(48)
0002b9 81ee      	LDD  R30,Y+6
0002ba 81ff      	LDD  R31,Y+6+1
0002bb 940e 03e7 	CALL __GETW1PF
0002bd 87e8      	STD  Y+8,R30
0002be 87f9      	STD  Y+8+1,R31
0002bf 81ee      	LDD  R30,Y+6
0002c0 81ff      	LDD  R31,Y+6+1
0002c1 9632      	ADIW R30,2
0002c2 83ee      	STD  Y+6,R30
0002c3 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0002c4 85e8      	LDD  R30,Y+8
0002c5 85f9      	LDD  R31,Y+8+1
0002c6 85aa      	LDD  R26,Y+10
0002c7 85bb      	LDD  R27,Y+10+1
0002c8 17ae      	CP   R26,R30
0002c9 07bf      	CPC  R27,R31
0002ca f050      	BRLO _0x202005C
0002cb 5f2f      	SUBI R18,-LOW(1)
0002cc 85a8      	LDD  R26,Y+8
0002cd 85b9      	LDD  R27,Y+8+1
0002ce 85ea      	LDD  R30,Y+10
0002cf 85fb      	LDD  R31,Y+10+1
0002d0 1bea      	SUB  R30,R26
0002d1 0bfb      	SBC  R31,R27
0002d2 87ea      	STD  Y+10,R30
0002d3 87fb      	STD  Y+10+1,R31
0002d4 cfef      	RJMP _0x202005A
                 _0x202005C:
0002d5 332a      	CPI  R18,58
0002d6 f028      	BRLO _0x202005D
0002d7 ff03      	SBRS R16,3
0002d8 c002      	RJMP _0x202005E
0002d9 5f29      	SUBI R18,-LOW(7)
0002da c001      	RJMP _0x202005F
                 _0x202005E:
0002db 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0002dc fd04      	SBRC R16,4
0002dd c01a      	RJMP _0x2020061
0002de 3321      	CPI  R18,49
0002df f420      	BRSH _0x2020063
0002e0 85a8      	LDD  R26,Y+8
0002e1 85b9      	LDD  R27,Y+8+1
0002e2 9711      	SBIW R26,1
0002e3 f409      	BRNE _0x2020062
                 _0x2020063:
0002e4 c009      	RJMP _0x20200CD
                 _0x2020062:
0002e5 1753      	CP   R21,R19
0002e6 f010      	BRLO _0x2020067
0002e7 ff00      	SBRS R16,0
0002e8 c001      	RJMP _0x2020068
                 _0x2020067:
0002e9 c013      	RJMP _0x2020066
                 _0x2020068:
0002ea e220      	LDI  R18,LOW(32)
0002eb ff07      	SBRS R16,7
0002ec c00b      	RJMP _0x2020069
0002ed e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0002ee 6100      	ORI  R16,LOW(16)
0002ef ff02      	SBRS R16,2
0002f0 c007      	RJMP _0x202006A
0002f1 7f0b      	ANDI R16,LOW(251)
0002f2 934a      	ST   -Y,R20
0002f3 940e 0388 	CALL SUBOPT_0x5
0002f5 3050      	CPI  R21,0
0002f6 f009      	BREQ _0x202006B
0002f7 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0002f8 940e 037b 	CALL SUBOPT_0x3
0002fa 3050      	CPI  R21,0
0002fb f009      	BREQ _0x202006C
0002fc 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0002fd 5031      	SUBI R19,LOW(1)
0002fe 85a8      	LDD  R26,Y+8
0002ff 85b9      	LDD  R27,Y+8+1
000300 9712      	SBIW R26,2
000301 f008      	BRLO _0x2020059
000302 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000303 ff00      	SBRS R16,0
000304 c008      	RJMP _0x202006D
                 _0x202006E:
000305 3050      	CPI  R21,0
000306 f031      	BREQ _0x2020070
000307 5051      	SUBI R21,LOW(1)
000308 e2e0      	LDI  R30,LOW(32)
000309 93ea      	ST   -Y,R30
00030a 940e 0388 	CALL SUBOPT_0x5
00030c cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
00030d e010      	LDI  R17,LOW(0)
                 _0x202001B:
00030e cee0      	RJMP _0x2020016
                 _0x2020018:
00030f 85ac      	LDD  R26,Y+12
000310 85bd      	LDD  R27,Y+12+1
000311 940e 03e3 	CALL __GETW1P
000313 940e 03f7 	CALL __LOADLOCR6
000315 9664      	ADIW R28,20
000316 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000317 92ff      	PUSH R15
000318 2ef8      	MOV  R15,R24
000319 9726      	SBIW R28,6
00031a 940e 03f2 	CALL __SAVELOCR4
00031c 940e 03a0 	CALL SUBOPT_0x8
00031e 9730      	SBIW R30,0
00031f f419      	BRNE _0x2020072
000320 efef      	LDI  R30,LOW(65535)
000321 efff      	LDI  R31,HIGH(65535)
000322 c023      	RJMP _0x2080001
                 _0x2020072:
000323 01de      	MOVW R26,R28
000324 9616      	ADIW R26,6
000325 940e 03b1 	CALL __ADDW2R15
000327 018d      	MOVW R16,R26
000328 940e 03a0 	CALL SUBOPT_0x8
00032a 83ee      	STD  Y+6,R30
00032b 83ff      	STD  Y+6+1,R31
00032c e0e0      	LDI  R30,LOW(0)
00032d 87e8      	STD  Y+8,R30
00032e 87e9      	STD  Y+8+1,R30
00032f 01de      	MOVW R26,R28
000330 961a      	ADIW R26,10
000331 940e 03b1 	CALL __ADDW2R15
000333 940e 03e3 	CALL __GETW1P
000335 93fa      	ST   -Y,R31
000336 93ea      	ST   -Y,R30
000337 931a      	ST   -Y,R17
000338 930a      	ST   -Y,R16
000339 eae3      	LDI  R30,LOW(_put_buff_G101)
00033a e0f1      	LDI  R31,HIGH(_put_buff_G101)
00033b 93fa      	ST   -Y,R31
00033c 93ea      	ST   -Y,R30
00033d 01de      	MOVW R26,R28
00033e 961a      	ADIW R26,10
00033f dea3      	RCALL __print_G101
000340 019f      	MOVW R18,R30
000341 81ae      	LDD  R26,Y+6
000342 81bf      	LDD  R27,Y+6+1
000343 e0e0      	LDI  R30,LOW(0)
000344 93ec      	ST   X,R30
000345 01f9      	MOVW R30,R18
                 _0x2080001:
000346 940e 03f9 	CALL __LOADLOCR4
000348 962a      	ADIW R28,10
000349 90ff      	POP  R15
00034a 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00034b 93ba      	ST   -Y,R27
00034c 93aa      	ST   -Y,R26
00034d 91a9          ld   r26,y+
00034e 91b9          ld   r27,y+
00034f 27ee          clr  r30
000350 27ff          clr  r31
                 strlen0:
000351 916d          ld   r22,x+
000352 2366          tst  r22
000353 f011          breq strlen1
000354 9631          adiw r30,1
000355 cffb          rjmp strlen0
                 strlen1:
000356 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000357 93ba      	ST   -Y,R27
000358 93aa      	ST   -Y,R26
000359 27aa          clr  r26
00035a 27bb          clr  r27
00035b 91e9          ld   r30,y+
00035c 91f9          ld   r31,y+
                 strlenf0:
00035d 9005      	lpm  r0,z+
00035e 2000          tst  r0
00035f f011          breq strlenf1
000360 9611          adiw r26,1
000361 cffb          rjmp strlenf0
                 strlenf1:
000362 01fd          movw r30,r26
000363 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _freq:
00016c           	.BYTE 0x4
                 _frequencyChars:
000170           	.BYTE 0x64
                 __base_y_G100:
0001d4           	.BYTE 0x4
                 __lcd_maxx:
0001d8           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000364 b5e7      	IN   R30,0x27
000365 2ffe      	MOV  R31,R30
000366 e0e0      	LDI  R30,0
000367 01df      	MOVW R26,R30
000368 b5e6      	IN   R30,0x26
000369 e0f0      	LDI  R31,0
00036a 0fea      	ADD  R30,R26
00036b 1ffb      	ADC  R31,R27
00036c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00036d 940e 0127 	CALL __lcd_write_data
00036f e0a3      	LDI  R26,LOW(3)
000370 e0b0      	LDI  R27,0
000371 940c 03a7 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
000373 e3a0      	LDI  R26,LOW(48)
000374 940e 0113 	CALL __lcd_write_nibble_G100
                +
000376 ec88     +LDI R24 , LOW ( 200 )
000377 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000378 9701     +SBIW R24 , 1
000379 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00037a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
00037b 932a      	ST   -Y,R18
00037c 85ad      	LDD  R26,Y+13
00037d 85be      	LDD  R27,Y+13+1
00037e 85ef      	LDD  R30,Y+15
00037f 89f8      	LDD  R31,Y+15+1
000380 9509      	ICALL
000381 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
000382 89e8      	LDD  R30,Y+16
000383 89f9      	LDD  R31,Y+16+1
000384 9734      	SBIW R30,4
000385 8be8      	STD  Y+16,R30
000386 8bf9      	STD  Y+16+1,R31
000387 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000388 85ad      	LDD  R26,Y+13
000389 85be      	LDD  R27,Y+13+1
00038a 85ef      	LDD  R30,Y+15
00038b 89f8      	LDD  R31,Y+15+1
00038c 9509      	ICALL
00038d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
00038e 89a8      	LDD  R26,Y+16
00038f 89b9      	LDD  R27,Y+16+1
000390 9614      	ADIW R26,4
000391 940e 03e3 	CALL __GETW1P
000393 83ee      	STD  Y+6,R30
000394 83ff      	STD  Y+6+1,R31
000395 81ae      	LDD  R26,Y+6
000396 81bf      	LDD  R27,Y+6+1
000397 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
000398 89a8      	LDD  R26,Y+16
000399 89b9      	LDD  R27,Y+16+1
00039a 9614      	ADIW R26,4
00039b 940e 03e3 	CALL __GETW1P
00039d 87ea      	STD  Y+10,R30
00039e 87fb      	STD  Y+10+1,R31
00039f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0003a0 01de      	MOVW R26,R28
0003a1 961c      	ADIW R26,12
0003a2 940e 03b1 	CALL __ADDW2R15
0003a4 940e 03e3 	CALL __GETW1P
0003a6 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003a7 9610      	adiw r26,0
0003a8 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003a9 ed80     +LDI R24 , LOW ( 0x7D0 )
0003aa e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003ab 9701     +SBIW R24 , 1
0003ac f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003ad 95a8      	wdr
0003ae 9711      	sbiw r26,1
0003af f7c9      	brne __delay_ms0
                 __delay_ms1:
0003b0 9508      	ret
                 
                 __ADDW2R15:
0003b1 2400      	CLR  R0
0003b2 0daf      	ADD  R26,R15
0003b3 1db0      	ADC  R27,R0
0003b4 9508      	RET
                 
                 __ANEGW1:
0003b5 95f1      	NEG  R31
0003b6 95e1      	NEG  R30
0003b7 40f0      	SBCI R31,0
0003b8 9508      	RET
                 
                 __CWD1:
0003b9 2f6f      	MOV  R22,R31
0003ba 0f66      	ADD  R22,R22
0003bb 0b66      	SBC  R22,R22
0003bc 2f76      	MOV  R23,R22
0003bd 9508      	RET
                 
                 __DIVD21U:
0003be 933f      	PUSH R19
0003bf 934f      	PUSH R20
0003c0 935f      	PUSH R21
0003c1 2400      	CLR  R0
0003c2 2411      	CLR  R1
0003c3 2744      	CLR  R20
0003c4 2755      	CLR  R21
0003c5 e230      	LDI  R19,32
                 __DIVD21U1:
0003c6 0faa      	LSL  R26
0003c7 1fbb      	ROL  R27
0003c8 1f88      	ROL  R24
0003c9 1f99      	ROL  R25
0003ca 1c00      	ROL  R0
0003cb 1c11      	ROL  R1
0003cc 1f44      	ROL  R20
0003cd 1f55      	ROL  R21
0003ce 1a0e      	SUB  R0,R30
0003cf 0a1f      	SBC  R1,R31
0003d0 0b46      	SBC  R20,R22
0003d1 0b57      	SBC  R21,R23
0003d2 f428      	BRCC __DIVD21U2
0003d3 0e0e      	ADD  R0,R30
0003d4 1e1f      	ADC  R1,R31
0003d5 1f46      	ADC  R20,R22
0003d6 1f57      	ADC  R21,R23
0003d7 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0003d8 60a1      	SBR  R26,1
                 __DIVD21U3:
0003d9 953a      	DEC  R19
0003da f759      	BRNE __DIVD21U1
0003db 01fd      	MOVW R30,R26
0003dc 01bc      	MOVW R22,R24
0003dd 01d0      	MOVW R26,R0
0003de 01ca      	MOVW R24,R20
0003df 915f      	POP  R21
0003e0 914f      	POP  R20
0003e1 913f      	POP  R19
0003e2 9508      	RET
                 
                 __GETW1P:
0003e3 91ed      	LD   R30,X+
0003e4 91fc      	LD   R31,X
0003e5 9711      	SBIW R26,1
0003e6 9508      	RET
                 
                 __GETW1PF:
0003e7 9005      	LPM  R0,Z+
0003e8 91f4      	LPM  R31,Z
0003e9 2de0      	MOV  R30,R0
0003ea 9508      	RET
                 
                 __PUTPARD1:
0003eb 937a      	ST   -Y,R23
0003ec 936a      	ST   -Y,R22
0003ed 93fa      	ST   -Y,R31
0003ee 93ea      	ST   -Y,R30
0003ef 9508      	RET
                 
                 __SAVELOCR6:
0003f0 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003f1 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003f2 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003f3 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003f4 931a      	ST   -Y,R17
0003f5 930a      	ST   -Y,R16
0003f6 9508      	RET
                 
                 __LOADLOCR6:
0003f7 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003f8 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003f9 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003fa 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003fb 8119      	LDD  R17,Y+1
0003fc 8108      	LD   R16,Y
0003fd 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  18 r1 :   7 r2 :   0 r3 :   0 r4 :   3 r5 :   1 r6 :   3 r7 :   2 
r8 :   3 r9 :   1 r10:   1 r11:   0 r12:   4 r13:   4 r14:   0 r15:   6 
r16:  34 r17:  24 r18:  29 r19:  12 r20:  16 r21:  23 r22:  17 r23:   7 
r24:  29 r25:   9 r26: 106 r27:  43 r28:  14 r29:   1 r30: 218 r31:  72 
x  :  23 y  : 188 z  :  15 
Registers used: 31 out of 35 (88.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   6 
adiw  :  25 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  18 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  31 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  53 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   6 cpc   :   4 cpi   :  33 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   7 inc   :   2 jmp   :  23 ld    :  37 ldd   :  76 ldi   : 114 
lds   :   3 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  20 movw  :  25 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  31 pop   :   4 push  :   4 rcall :  17 ret   :  27 
reti  :   1 rjmp  :  64 rol   :   7 ror   :   0 sbc   :   6 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  19 sbr   :   1 sbrc  :   2 
sbrs  :  12 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  70 std   :  31 sts   :   7 sub   :   3 subi  :  16 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 60 out of 116 (51.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007fc   1958     86   2044   16384  12.5%
[.dseg] 0x000060 0x0001d9      0    121    121    1024  11.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
